<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[shadowsocks 科学上网及访问byr bt]]></title>
    <url>%2F2018%2Fshadowsocks-%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91%E5%8F%8A%E8%AE%BF%E9%97%AEbyr-bt.html</url>
    <content type="text"><![CDATA[本篇文章介绍搭建shadowsocks服务器实现科学上网，以及如何实现ipv4访问ipv6网站（访问北邮人bt）。基本步骤一台支持ipv6的vps在vps上搭建shadowsocks本地下载shadowsocks客户端，并配置上一步中搭建的shadowsocks地址配置bt资源下载客户端购买vps博主购买的是vultr至于服务器地址，可以选择 Tokyo 或 Los Angeles 尝试，如果延时太高，可以再尝试换一个试试。搭建shadowsocks服务网上有相关博文：服务器一键搭建shadowsocks及优化博主安装的是One click Install Shadowsocks-Python server注意安装时加密方式默认是aes-256-gcm，有些shadowsocks客户端没有这种加密方式，可以选择aes-256-cfb。当然也可以后面安装客户端之后再重改shadowsocks配置项，配置项地址：’/etc/shadowsocks.json’配置本地shadowsocks可选择shadowsocksX-NG 或 shadowsocksX-R 等客户端。12345678910&#123; &quot;server&quot;:&quot;0.0.0.0&quot;, &quot;server_port&quot;:8989, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;local_port&quot;:1080, &quot;password&quot;:&quot;yourpassword&quot;, &quot;timeout&quot;:300, &quot;method&quot;:&quot;aes-256-cfb&quot;, &quot;fast_open&quot;: false &#125;按照上文中的shadowsocks服务配置来配置本地相关参数。有些客户端可能会有协议、混淆等参数: 协议默认origin, 混淆默认plain。配置完即可访问 google 等海外网站，通过也可查看BYRBT。后者如果访问不了，可打开shadowsocks全局代理模式。配置bt资源下载客户端下载byr bt客户端博主采用的是uTorrent博主以 Mac版本的配置为例说明按照上图配置即可。注意：其中本地Socks5端口号可以通过shadowsocks客户端来查看，如下图：shadowsocks - 高级设置ok, 到这里我们就可以愉快的翻墙，上bt，各种资源看看看了。。。参考文档使用shadowsocks，搭建ipv6 VPN，让ipv4上ipv6，下载速度提升到100M]]></content>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[zhangcabbage.cn 2.0 发布说明]]></title>
    <url>%2F2018%2Fzhangcabbage-cn-2-0-%E5%8F%91%E5%B8%83%E8%AF%B4%E6%98%8E.html</url>
    <content type="text"><![CDATA[年底之际，zhangcabbage.cn迎来重大改版，升级为2.0。下面详细介绍更新内容发布摘要16年搭建个人博客以来，断断续续更新着文章，尤其是17年7月份之后就很少打理。赶上闲暇，升级博客功能，以激励自己写作来锻炼自己的语言整合、知识梳理能力。网站升级的主要契机就是hexo中多说评论系统的关闭，导致原先博客评论系统的失效，这就是蝴蝶效应啊更新特性hexo 主题 next 版本全新升级 5.0.1 -&gt; 5.1.4由于已对theme进行深度定制，加上next中配置文件_config.yml已被反复修改配置，直接更新会覆盖已有配置，所以hexo主题更新比较困难，新版next已有相应解决办法。增加文章详情：更新时间、字数统计、阅读时长修改文章评论系统：多说 -&gt; liveRe博客底部增加浏览uv和pv，并隐藏hexo强力驱动博客增加加密文章，提供私人情感释放空间添加博客顶部加载条文章底部打赏文字不抖动博客加速：页面压缩参照链接hexo的next主题个性化教程：打造炫酷网站hexo博客加速之页面压缩]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>博客技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[18年校招面试总结]]></title>
    <url>%2F2018%2F18%E5%B9%B4%E6%A0%A1%E6%8B%9B%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93.html</url>
    <content type="text"><![CDATA[三年之后又三年，三年之后又三年，快十年了老大。《无间道》里的这句话也是我想说的，终于我也要毕业找工作了（正巧又是本命年。这里对从17年3月份开始的春招实习面试，一直到9月份的秋招面试进行回顾总结，其中包括求职历程、面试题目、公司待遇等等方面。想看就点进来吧……更新历史2018.01.20：完成初稿写在前面研究生生涯是我做选择最多的一个阶段，让我更清晰的知道了我想要什么，也让我更深刻认识到 选择比努力更重要 。既然是面试总结，那直接先上总结表最清晰明了。下表中✔表示最终成功拿到offer，✘表示没有拿到offer，具体情况见表头。首先是春招实习投递状态，最早从3月初开学起投递。由于导师不放实习，最后选择了离学校最近的今日头条从4月12号开始偷摸实习。编号投递公司投递时间无消息/放弃笔试未通过面试未通过实习offer1阿里3.07✘2腾讯3.10✘3网易3.10✔4网易有道3.15✔5搜狐3.13✔6美团3.14✘7今日头条3.16✔8华为3.16✔9CVTE3.16✘10完美世界3.23✘11美丽联合3.29✘123604.02✔之后是校招投递状态，差不多从7月29号开始投递校招简历，一直到9月中下旬为止。编号投递公司无消息/放弃简历/测评未通过笔试未通过面试未通过校招offer1猿辅导✔2今日头条✔3CVTE✘4华为✔5京东✔6搜狗✔7网易杭研✘8阿里杭州✔9第四范式✘10便利蜂✔11拼多多✔1258✘13链家✘14携程✘15蘑菇街✘16商汤科技✘17滴滴✘18美团✘19360✘20百度✘21腾讯✘22小红书✘23好未来✘24Hulu✘25微软✘26快手✘27爱奇艺✘28猫眼✘29搜狐✘30科大讯飞✘31招银网络✘32顺丰科技✘33FreeWheel✘本文我将分春招和秋招对面试过公司的面试过程进行整理记录，记录的过程以罗列面试中面试官提出的问题的形式进行，作为面试总结记录这里并不会对面试问题给出答案，有兴趣可以自行解答或评论交流。另外对IT方向进行一下说明，这也关系本文面试题目的方向。IT软件开发方向可以按语言来划分，程序猿语言技能都是 主语言+脚本语言，按主语言大体分为：C/C++、Java、JS这三类（我随便一说别喷我，逃。。。也可以按工作方向划分为：前端、后端、运维、数据分析、大数据、算法。大多数情况下是按后者来划分，毕竟语言相通性更强。我本身混杂着 后端和大数据开发，因而校招部分公司投递大数据开发、数据挖掘开发，部分公司投递后端开发岗位。实习实习对最后秋招影响还是不小的，一方面可以直接拿到实习转正保底offer，另一方面一个好的实习也是校招的敲门砖。当然也有它坏的一方面，可能会耽误后面校招的复习准备。阿里巴巴阿里的面试总结单独成文，见 阿里校招回忆录。腾讯腾讯暑期实习招聘内推会对投递人简历进行评估，分B、B+、A、A+、S等，A+以上会有提前面试资格，否则只能走统一面试通道。我简历评级A，所以只能等统一酒店面试。1234567- 问熟悉C++不- 给了一个C++程序，找出错误- 写一个清除String字符串空格的程序，返回字符串中空格数- QQ登录服务器的负载均衡实现？- 一个分布式问题，一台机器向1W台机器下发文件，如何加快下发速度- 采用P2P的思路解决，然后面试官限定1W台机器只能和下发文件机器交互该如何解决？（这台机器受其带宽限制，分配带宽策略……- 如何实现一个数组shuffle，不使用内置random库？（关于伪随机算法的实现聊的不是很欢乐，GG网易123456- 写一个单例模式（常见问题，给吹逼一波枚举单例- 枚举单例比DCL单例的优势- 写出枚举单例代码- 如何查看kafka数据是否堆积？- kafka多个消费者线程消费topic，其partition被均分到partition，如果某个消费者线程突然挂掉了，partition如何分配？- 其他一些常见的问题，无算法笔试之后大老远去西北旺网易北京总部面试，当时还在头条实习，特地请了一天假，谁知道就一轮面试。状态：拿到实习offer。这里有个小插曲，当时网易hr打电话告诉我面试通过，问我是否接受offer暑期去实习。那么重点来了，我给回绝后，hr问我你拒绝网易是去了微软亚洲研究院了么？黑人问号脸，2333333….嗯，大网易国内第一网易有道同样也是西北旺网易北京总部那地儿，老远了。一面1234- 随便问了点项目，发现我的spark项目没啥可聊的，然后就开始手撕算法了- 给定一个数组，判断此数组是否为二叉搜索树的后续遍历，讲了一下思路，没让写代码- 从外至内顺时针循环打印二维数组，在纸上写代码- 给一个字符串写一个atoi函数转换成int，没有详细输入说明，自己考虑所有情况，手写代码这一面基本是手撕算法了，不过基本都是《剑指offer》上的题目了二面1234567891011121314151617181920212223242526272829303132333435363738394041- 做的spark项目日志是如何收集上来的？引出hdfs和kafka- hdfs存储系统是怎么样的？- hdfs能存储什么类型文件？- 如果hdfs存储很多小文件会怎样，为什么？- 一个电脑，2G内存、4G磁盘，现在往这个hdfs中存放10M大小的文件，能存储多少个这样的文件？- hdfs默认块大小是多少？- 当存储多个小文件时，是往一个块中叠加存储还是重新开辟一个块来存储？- 项目中问什么要使用hdfs，有考虑其他方式么？- kafka如何保证数据一致性？- kafka如何保证数据不丢失？- 如果kafka集群有3台机器，冗余备份3份，这3个备份在集群中怎么分布？- 你知道java多线程的知识么，能大致讲一下么- ThreadLocal是干嘛的- ThreadLocal的实现原理？- concurrentHashMap如何实现的？- concurrentHashMap在put函数操作的时候，在哪里加锁了？- volatile有什么保证？（可见性和顺序性，成员变量读写操作的原子性）- 面试官写了一个volatile成员变量count，开了三个线程，每个线程分别count++，但是main函数中调用的是thread的run方法，问我这个程序会输出什么？- run和start方法的区别？- 你知道start方法内部是如何实现的么？- 你能说出你有什么办法让上面程序线程安全，正确么- 在我说出synchronized和ReentrantLock之后，问我他们是什么类型的锁？- 我说可重入锁之后问我，什么是可重入锁？- 那除了可重入锁，还有别的类型的锁么？- 我回自旋锁后，问我什么是自旋锁？- 继续问我还有什么办法能实现程序的正确？- 我回可以使用CAS，之后问我CAS是如何实现的？- 又说那你用cas改一下程序，让它安全。（直接使用AtomicInteger）- 还有其他办法么？（捂脸，想不到了，就不能给我一个应用场景么）- 能讲一下JVM么- 你知道有哪些GC方法么- 如果需要程序尽量大的吞吐率，如何选择GC器，为什么？- CMS并发标记怎么进行的？- 你有在项目中使用上面JVM的GC器选择么- JVM内存溢出怎么进行调试查找？- JVM内存溢出可能的区域有哪些？- 面试官说，最后再来考一道算法吧。给两个字符串，找出这两个字符串的最大公共子字符串长度，注意不是子序列- 我想了一下说出来dp的思路，然后面试官说写一下dp公式- 面试官说你有听说过LCS么，我说嗯，原来写过LCS- 然后面试官说：行，那把代码在纸上写出来吧考察挺全面，对语言、算法、大数据方向框架等，面试完直接告诉我技术面通过了，问我啥时候可以去实习，还带我见一下hr。总体感觉网易有道比网易技术强些……今日头条之前对今日头条并不是很了解，只听说对算法要求很高，后面在头条实习感觉也是非常欢乐，如果不是工作方向不是很喜欢必留无意了。后面会单独写一篇关于头条实习感触的文章，这段实习对我也是很大。一面1234567- spark的reduceby和groupby的区别- 算法：1，2 .... n的数组找出其中缺失的数- 算法：假如给的是一个字符串，可能有&quot;123456789101112&quot;，找出缺失的数（深度遍历）- mysql中两个表的inner join 和out join left区别- kafka的架构- kafka中zero-copy听说过么- 聊人生聊理想二面12345678910- kafka的消费者在消费的时候如何保证数据不丢失- kafka消费者消费topic时，集群如何维护offset（zookeeper为每一个partition维护一个offset）- 算法：一个n面的骰子，其各面的概率为a[1...n]，写一个骰子点数生成器- 由上题算法引申题目：解法中我用一个数组维护每个点的概率，如何只用一个double变量来维护？- 聊人生聊理想- 觉得在大公司还是在小公司好- 中途在头条吃了个饭- 讲讲多线程、线程池- python的装饰器你了解么？- python装饰器的应用场景hr面1234567891011- 项目中遇到的问题- 成绩排名- 最好的三个朋友的性格- 待过的最好的团队- 推荐书给hr- 对一面二面面试官的印象- 自己的偶像(吴军、吴恩达)- 兴趣爱好- 职业规划，未来目标- 除了兴趣爱好和技术对企业其他方面还有没有关注（扯京东阿里的定位，菜鸟网络的模式等- 如何学习技术等等光hr面竟然面了1个半小时，orz360360官网投递，最后是去360一家子公司面试，叫360天广汇通。一面1234567- 写一个单例模式？- 枚举实现单例有什么好处？- Java多线程创建方式？（Thread、Runnable、线程池）- 线程池相关问题？- kafka架构？- kafka同一消费者组中消费者个数为什么不能多于topic下的partition个数？- O(1)时间删除链表某个结点二面基本没问啥有营养的问题三面123456789101112131415- 对http的了解？- TCP长连接、短连接的区别- TCP长连接长时间不发送数据，会不会断开？- 如何维持一个TCP长连接？- 你常用的Java数据结构（数组、list、map）？- 为啥hashmap需要同时重载equals和hashcode？- hashtable和concurrentHashMap的性能差别？- 线程池、数据库池的作用- 分布式系统的三个特性？- CAP能不能三个都保证？- 如何保证分布式系统的一致性？- 如何设计实现一个Java定时任务，让一个陷入死循环的线程某一段时间之后停止？（orz，最后面试官告诉我Java中实现不了- 问我最近在看啥书？（脑袋抽了，说操作系统）- 操作进程调度方式？- 什么情况下会进行进行调度？拿到实习offer，最后拒绝了。CVTE第一次知道这家公司，听室友说待遇还不错，跟风投了一下。一面一面是电话面试123456789101112131415- 讲讲后台开发项目经历- hdfs的文件系统架构- hdfs如何实现数据容错性- hdfs数据冗余备份策略- hadoop和spark的区别- spark当在中间数据在内存中访问不到时，是怎么处理的；或者说中间数据过大spark是如何处理的？- mapReduce过程中数据偏移严重时如何解决？- 刚才你讲项目时，说家电和云端通信，使用的是什么网络协议或者框架的？- 家电和云端的长连接是建立在什么协议上的？- TCP协议是如何建立连接和断开连接的？- 能给我讲讲OSI是哪七层么？- 你还知道其他网络协议么，比如http？- http协议request头部有哪些字段？- http协议状态码有哪些？- 你还对哪些技术感兴趣？二面123456789101112131415161718- 介绍项目经历- 技术特长- spark作业提交之后的处理流程- spark有哪些组件- 解释一下spark的RDD、Dstream、DataSet、DataFrame这些概念- spark如何进行优化- 面试选择后台，还是大数据？- 后台项目经历- 介绍一下Java异常处理机制- 什么情况下会throw异常，什么情况下回catch这个异常- 编程中常遇到的异常有哪些？- Java内存溢出和内存泄漏的区别？- 使用过那些数据库- 关系型数据库和非关系型数据库的区别？- 结构化数据和关系型数据是不是等同的- 你使用mysql除了增删改查之外，还用来干过什么- mysql有哪些常见的优化方法- mysql什么时候需要建立索引二面是视频面试，表现不是很好，果不其然挂了……一定要早些选定好自己大体方向，毕竟应届生也没有那么多精力各方面都精通华为华为的面试太水了，基本啥问题都没问，介绍一下项目一面过了，谈谈人生聊聊理想又一面过了。秋招如果认真看到了这儿，你是真爱粉喏。尝试解答以上面试题目，如果对你一点难度都没有那请收下我的膝盖，谢谢大佬赏脸关注，欢迎来跟我搞基。下面严肃的进入秋招。养兵千日，用在今朝。校招是一场考验心力耐力的大战……猿辅导实习一天500的公司，虽然是个小公司，但是给人的感觉非常舒服。一面1234567- 聊项目- python中L.append()如何实现原子操作- 线程池的优势- 生产者消费者模式如何保存数据- TCP断开的过程- 求二叉树中根到叶子结点的路径中和为sum的所有路径，写程序- 最大连续子数组和（非首尾相接），写程序面试官看了我的Github，说我刷了很多leetcode对面试很有用之类的话。Github、博客之类的有干货要好好维护呀，简历亮点哦！！二面1234- 继承的缺点是什么- 设计模式你还了解些什么- 聊聊其他兴趣爱好，数据挖掘比赛的事情- 问一道小题：用一个数组实现一个环形缓冲区，实现void put(byte[] date)和byte[] get(n)两个方法拿到offer。猿辅导公司待遇还是很有竞争力的：每年一次出国5000旅游经费、五一9天长假等等京东一面12345678910111213- 如何实现序列化问题（类似protocol buffer的方式）- hashmap和hashtable的区别- hashmap如何实现put- 链表查找和红黑树查找时间复杂度- spark和hadoop的区别- TCP的四次挥手问题- 关于close_wait、time_wait和closing状态了解多少- redis的client和server通信协议了解么- mysql中的脏读和幻读的区别- 单例模式- 为什么需要使用DCL- 算法：合并连个有序数组问题- 算法：链表删除二面123456789101112131415- 项目：ABTest数据架构- 如何解决spark streaming 使用mysql保存offset时多消费问题- spark中master、slave、worker、driver的概念区别- worker和Executor的区别- spark如何划分job- spark如何划分stage- spark如何划分task- redis的读写性能- kafka的读写性能- 说说kafka的架构- 关于kafka消费partition个数问题- partition的replica的一致性问题- low level实现消费者，能不能多个消费一个topic- kafka的 high level和 low level 的区别- 算法：字符串判断是不是合法的double类型，eg:+1.e+5、+.12e+3、1、1.0都是true，+e0就不是。京东的hr面也是很惊奇，当时我面试时是3对5模式，也就是3个hr同时面试5个候选人，要抢答啊这是？让对比京东快递和菜鸟快递，你自己的知识能对京东的价值等等问题。反正我是吐槽了一把京东模式的弊端，毕竟我那时候是阿里粉，233333……hr面这么怼它后来还很意外的给了offer，令我吃惊。由于薪资太低被我拒绝了，后来hr再来联系说可以申请涨薪也被我给回绝了。搜狗一面123456- 做一套题- 自我介绍- 讲讲ocpc的业务相关- 如何设计一个ABTest平台- 算法：长20宽2的一块地，长1宽2的砖块，有多少种铺砖的方式- 算法：手写最小堆排序二面1234- 关于头条广告系统的架构方面- 关于CPC、CPM等广告占比- 了解广告策略相关的什么- 算法：字符串编辑距离计算，dp问题搜狗和搜狐是国内互联网中最轻松的公司了吧，只是给我的offer太低了，而且还是C++/算法工程师。年假还是蛮有诱惑力的，有15天的年假。CVTE为啥我又投了CVTE，可能最开始校招比较焦虑，就各种海投。12345678910111213141516- 自我介绍- hadoop任务调度策略？- hdfs的HA，如何实现？- active namenode和standby namenode之间如何共享Edits log？- namenode HA情况下，还需要Secondary namenode么？- hdfs自身存储文件的格式有哪些- hdfs副本存放策略- 假如hdfs client当前不在集群中，副本如何存放？路径远近如何计算？- spark streaming 如何实现的- spark sql最后都是解析成map reduce来实现的么？- JVM有哪些内存回收算法- 如何使JVM报StackOverflow错误- 不使用函数反复调用，如何做- int[] a = &#123;1,30,100,150&#125;内存中如何分布- Java能否获取到引用的名称？投的是什么提前批CVTE精英计划，不过后来到hr面挂了，呵呵哒网易投递的是网易杭研，8月底去杭州网易总部面试。2面 + hr面。最后竟然挂了，18年网易校招我无力吐槽。好像已经记不得有啥有营养的问题了，不过照样记得一个hr彩蛋，2333333……跟实习一样，这里又有一个小插曲。背景：面试了一下午，等到hr面时我着急赶火车回北京。加上8月底我已经有好几个公司都到hr面阶段，所以说话比较随便（还是too naive）。当时hr大姐姐问我为啥会选择网易？我说我比较想去类似头条、网易这类发展型公司，这样自己能力有更大的发挥空间……等等，这时候hr突然说：你觉得网易是跟头条差不多的发展型公司？哎呀，突然觉得气氛哪里不对劲了……第四范式现场笔试1234- 增加内存为什么使程序运行快？- 关于计算时间复杂度- 知乎喝水试毒，最少需要多少人- 快排时间复杂度问题一面1234567- 自我介绍- 最大连续子数组和- 最大连续子数组绝对值和- 证明以上- 秀了一把循环数组最大连续子数组和- 一个数组，甲乙分别从前后取数，问谁能赢- spark 算子问题transfer与action算子二面12345678910- 自我介绍- 设计生产者到server替换kafka满足[可用性]、[低延时]、[高吞吐]- 如何处理低延时和高吞吐的问题？参考网络层TCP滑动窗口解决方案- Java单核cpu多线程进行i++是否需要进行同步控制- 为什么？- python呢？- hive处理数据偏移问题- 聊数据挖掘比赛的事- 关于提取特征问题- 笔试上楼梯能否用空间O(1)的算法，时间O(1)的算法？(斐波那契数列的公式三面123456- 介绍在头条的项目- 关于分层实验- 关于抽样方式- 你平时喜不喜欢主动探索动手之类的- 给你offer什么条件下会不来- 你还有什么问题么状态：终面挂。最后一面非技术面了要表现温顺一些，有眼力价，否则就像我一样。拼多多拼多多的校招流程很长很长……大概7月份就做笔试了，等了一个月忘记了才通知面试消息，然而又等了一个月才通知正式面试。流程时间太长不适合吊死，不过拼多多的面试和hr小姐姐还是可以的，现在还记得hr小姐姐很白很可爱，而且还是武汉大学的。hahaha……随便说一下拼多多的待遇吧，包吃包住，一周六天，吓的我都不敢去。要钱又命硬的可以去，嗯！最后，对仍奋战校招的哥们儿说一句：加油！！！]]></content>
      <categories>
        <category>校招</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>校招</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[阿里校招回忆录]]></title>
    <url>%2F2017%2F%E9%98%BF%E9%87%8C%E6%A0%A1%E6%8B%9B-%E6%A2%A6%E6%83%B3%E6%98%AF%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%89%E7%9A%84%EF%BC%8C%E4%B8%87%E4%B8%80%E5%AE%9E%E7%8E%B0%E4%BA%86%E5%91%A2.html</url>
    <content type="text"><![CDATA[国内谈互联网必言BAT TMD(Baidu、Alibaba、Tencent、TouTiao、MeiTu、DiDi)，同样这些是IT校招必投公司。本文是自己18年校招阿里面试的回忆录，其中也会谈及一些校招准备。更新历史2017.09.24: 完成初稿2018.01.17: 修改，删减过多的个人情感表达写在前面校招是段劳心伤神的经历，从7月中一直到9月底，身心都承受着巨大的压力。大家都迷茫过，怀疑过，失落过… 希望我的经历能给大家一点帮助。我会尽量客观叙述面试过程，多些干货少些扯淡。我有个习惯，每次面试完会立马通过回忆记录下面试问题，以便查缺补漏。下面回忆录也多以直接贴面试问题为主。实习面试从3月份春招实习开始春招内推一面12345678910111213141516171819202122232425262728293031323334353637383940414243[项目]介绍在公司工作内容[大数据] 日志收集流程 spark和hadoop的区别 hadoop如何实现高可用 zookeeper的作用[Java基础]try&#123; return ;&#125;catch()&#123;&#125;finally&#123; return &#125;哪个return会起作用？ [多线程]HashMap自己实现的key为什么需要同时实现equals和hashcode Java中支持同步的集合有哪些 多线程volatile volatile保证程序执行顺序，那为啥需要保证，如果不保证先写再读会出现什么问题？ 多线程synchronized ThreadLocal的作用 [IO] 关于Java NIO IO操作时会抛出啥异常 序列化问题，ID变化会出现什么结果 是否使用过其他序列化工具 [JVM] 回收算法有哪些 新生代老年代 控制程序内存的参数 如何看程序哪地方内存溢出[MySQL] mysql支持事务么 事务隔离级别mysql索引使用什么数据结构网络协议Http状态码列举 Http非状态协议 cookie的作用，数据存储样式[操作系统] Linux下看CPU使用量 看内存使用量 看磁盘IO情况 web服务器有哪些？ Linux下的epoll是阻塞还是非阻塞？[算法和数据结构] 1、一亿个数据找其中最大的十个(内存放得下)，我说用快速查找，时间复杂度为O(N)，还怎么优化2、一亿个电话号码，都是八位每一位都是0-9，内存放不下，可能会有重复。如何找其中不重复电话号码的个数？(压缩算法,可以使用位图)1个多小时的面试，由于准备不足，回答的很不好，第二天官网状态就显示挂了。这段时间还有个室友也面了阿里，并最后拿到了阿里云的实习offer。不死心下，又进行了自主投递，这次自主投递就是之后一直面试的阿里中间件数据库部门了。大公司不是所有的部门都很好，bat边缘部门还不如tmd核心部门。建议有认识核心部门师兄的同学针对性的投，走官方流程随意分配部门不一定很好。春季校招实习一面这个时候大概为2017.04.19123456789101112131415介绍一下项目数据是如何采集的？spark规则模型不可能完全用sql来实现，如果让你实现一个可以接入处理过程的脚本，你会如何实现？常见的java集合HashMap的实现，如何处理碰撞？能否存放null值，null值得hashcode是多少？如果分别不实现hashcode和equals存放HashMap会出现什么情况？HashMap和concurrentHashMap的区别。举个栗子说明HashMap如何操作不安全。concurrentHashMap如何实现的？CAS的实现原理？为什么CAS乐观锁要比同步锁这种方式好如何避免CAS的循环等待？volatile和AtomicInteger的区别，或者你可以先说说它们分别的作用，再说说他们的区别。 synchronized和显示锁的区别春季校招实习二面1234567891011121314spark如何实现top5spark如何实现求avgspark master节点fail该如何实现转移checkpoint动态的备份task和中间结果到hdfs，会影响spark的性能，那么应该如何解决这个问题？kafka为什么作为消息队列存取数据很快？zerocopy的概念关于spark、kafka方面你自己还了解多少，讲讲treeMap内部实现linkedHashMap内部实现treeMap和linkedHashMap它们之间插入、删除、查找的时间复杂度concurrentHashMap的内部实现关于mysql和nosql了解多少redis了解多少，讲讲其备份过程关于负载均衡了解多少春季校招实习三面三面有点尬，直接问我有没有看过spark、kafka的源码，没有的话，咱们就直接做两道算法题吧。两道比较简单的算法题，做完邮件回发，从此没有消息。这个时候为2017.05.05面试中从实习三面后官网状态一直是面试中，持续到校招，自动由实习招聘跳转成应届校招，状态仍是面试中，大概就是传说中的默拒了吧。后来在byr论坛找学长校招内推，也一直没有消息。8月中旬的那段时间一直收到阿里让做测评和笔试的短信，当时已经没有校招内推面试机会了，索性自暴自弃，拒绝做测评和笔试。后来收到过一次阿里电话，然而没 接 到！因为新换的小米6震动声音小，没有接到电话。这期间另外一个室友已经部门内推和校招内推面了2次阿里，跟我说阿里接不到电话就再也不会打电话了…弃疗…校招面试08.24，突然又收到阿里电话，然而因为之前一直在实习，8月中旬时候一直没有面试，完全就是一直弱鸡啊，怎么面试。。。仓促的进行面试，抱着放弃的心态问了一下面试官，我的奇怪状态。面试官告诉我，面试进度紧接着实习面试记录，目前是三面。what？黑人问号脸…秋季校招一面(三面？)1234567讲讲实习项目头条集群多大，你有没有参与管理集群你对什么比较熟悉kafka？redis?kafka如何实现一致性ISR如何实现？具体如何解释follower跟得上leader？具体实现一道算法题：给两个文件A、B分别100G，内存1G，AB两个文件分别一行存放一个long型数据，求AB两个文件共有的数据的出现频率前十的数秋季校招交叉25号，头条转正答辩。在公司接到了阿里交叉面的电话。同样问了些大数据、Java基础、多线程、linux相关、毕业论文相关。12345678Feature的作用生产者消费者模式的实现如何了解这些Java知识的如何看待数据分析和数据平台两种工作方向的？阻塞队列里的condition的实现有没有在开源社区提交过pull对linux bash脚本了解如何？如果有个文件让你统计有多少行，怎么统计？wc -l秋季校招HR面效率很快，下午交叉面面完，一会儿就收到hr电话，约晚上进行视频面。没想到我也能面到阿里hr面。面试中不是你不优秀，只是你不够优秀之后的状态又一直是面试中，9月8号的样子特地发邮件问了实习三面面试官，面试官回邮件说：希望很大，你再等等，两周内有消息。之后阿里各部门的意向书都相继发下来，让我更加焦虑，每天刷牛客、QQ群看大家状态，打听消息。嗯，其他部门的offer已经陆续发完了……结果终究还是来了，9月13号的样子，再一次收到阿里部门电话。告诉我说: 部门原本4个hc(校招名额)，你是其中一个，但是现在被砍到2个。我们不得已进行横纵向比较，非常遗憾的通知你，这次不给你发offer了。部门老大也表示很遗憾，说是要加微信，长线联系观察，说不定明年有机会在合作……真是印证了头条的一位同事跟我说的话：不是你不优秀，只是你不够优秀。按阿里的话：拥抱变化。。。我成为了终面小杀手，第四范式、阿里、网易都是技术面过了，到hr面不知道什么情况挂了。阿里offer期间还问了加我微信的阿里师兄我的面试评级，他告诉我是a，还说如果按照平时流程已经ok了，可惜了。失落、迷茫感剧增。9月22号，突然收到阿里短信，说欢迎亲加入阿里巴巴。what？黑人问号一脸懵逼。。。赶紧找之前说跟我保持联系的阿里师兄确认，最后说是别的部门从中间件部门溢出名单中捞起来了，简直是电影桥段般的逆转。从16年开始到今天，3次rejected，2年的期盼，1心追求。一路曲曲折折。我，还是拿到了阿里offer。写在最后自己的定位很重要！前端、后台、移动端、算法、大数据，千万不要反复变实习要找合适的。方向和公司双赢最好早做准备！如果不想留实习公司，早辞职。调整好心态，心态！不要害怕失败，早晚会成功。]]></content>
      <categories>
        <category>校招</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>校招</tag>
        <tag>阿里</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Permutation --- 字符串的排列]]></title>
    <url>%2F2017%2FPermutation-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97.html</url>
    <content type="text"><![CDATA[题目犯过的错误，我总是会反复再犯。Permutation – 字符串的排列，16年遇到这个问题，特地在code中总结，然而过了一年没怎么刷题的我，又有一点混。下面对解法做概要记录直接给题目输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc, 则打印出由字符a,b,c所能排列出来的所有字符串: abc,acb,bac,bca,cab和cba。可能有字符重复！分析解法一 递归把字符串看成两部分：第一个字符和剩下字符，每次从剩下字符中选择一个作为头字符，之后递归进行。简单如上说，可能你不知道如何code，我们来分析一下关键点。1）关于头字符的选择。对于一个str(i,j)的字符，我们从i到j循环轮流作为头字符。这里有个问题：可能字符串有重复。对字符aba，按之前的分析，a就会当两次老大，但是这就不公平了啊。b(小妾)就会想凭什么a(正房)被临幸两次，我才一次，嘤嘤嘤……(老婆：什么…你还想有小妾？逃…..)所以需要控制一下频率，怎么回事，我说话语气怎么不对了，咳咳。。在临幸到下标x时，那么就在str(i, x-1)查看有没有被临幸过，如果没有则今晚就翻它的牌子。2）递归的结束点我们需要一个递归传递当前字符遍历下标，当下标到字符串结尾时，则停止。其实很简单，code如下：123456789101112131415161718192021222324252627282930313233343536public ArrayList&lt;String&gt; Permutation(String str) &#123; ArrayList&lt;String&gt; res = new ArrayList&lt;&gt;(); if (str == null || &quot;&quot;.equals(str)) return res; char[] c = str.toCharArray(); permutation(c, 0, res); Collections.sort(res); //字典序排列 return res;&#125;private void permutation(char[] c, int x, ArrayList&lt;String&gt; res) &#123; if (x == c.length) res.add(String.valueOf(c)); else &#123; for (int i = x; i &lt; c.length; i++) &#123; if (canSwap(c, x, i)) &#123; //控制是否交换 swap(c, x, i); permutation(c, x + 1, res); swap(c, x, i); &#125; &#125; &#125;&#125;private boolean canSwap(char[] c, int i, int j) &#123; char tmp = c[j]; for (int k = i; k &lt; j; k++) &#123; if (c[k] == tmp) return false; &#125; return true;&#125;public void swap(char[] nums, int m, int n) &#123; char temp = nums[m]; nums[m] = nums[n]; nums[n] = temp;&#125;解法二 循环如下我们有规律的循环遍历，直接产生一个字典序列的排列集。算法过程描述如下：1）从后往前，找到第一个顺序前后数对，如34126543中的26，2即为替换数a2）从后往前，找到第一个比替换数a大的最小数，很容易知道a之后的数据都是倒序，所以从后往前找第一个比a大的，即比a大的最小数b3）交换此两个数a、b，根据上面的道理我们知道：交换之后a之后的仍为倒序4）把a之后的倒序倒置一遍，即变换为顺序。并返回true1234567891011121314151617181920212223242526272829303132333435363738394041public ArrayList&lt;String&gt; Permutation(String str) &#123; ArrayList&lt;String&gt; res = new ArrayList&lt;String&gt;(); if (str == null || &quot;&quot;.equals(str)) return res; char[] c = str.toCharArray(); Arrays.sort(c); do &#123; res.add(String.valueOf(c)); &#125; while (hasNextPermutation(c)); return res;&#125;private boolean hasNextPermutation(char[] c) &#123; int x = c.length; while (x &gt; 1) &#123; //注意：排除 &lt; 2的不需排序字符串 x--; if (c[x - 1] &lt; c[x]) &#123; //注意：只能是小于 int y = c.length - 1; while (c[y] &lt;= c[x - 1]) y--; //注意：只能一直到大于 c[x - 1] 的数 swap(c, x - 1, y); reverse(c, x, c.length - 1); return true; &#125; &#125; reverse(c, 0, c.length - 1); return false;&#125;public void swap(char[] nums, int m, int n) &#123; char temp = nums[m]; nums[m] = nums[n]; nums[n] = temp;&#125;public void reverse(char[] array, int start, int end) &#123; int i = start, j = end; while (i &lt; j) &#123; swap(array, i++, j--); &#125;&#125;扩展同样是上面的排序，选出m个做全排列。程序该如何？PS: 写其实只需要稍微改一下上面的代码就行。具体代码见：Permutation]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Permutation</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见linux命令随记]]></title>
    <url>%2F2017%2F%E5%B8%B8%E8%A7%81linux%E5%91%BD%E4%BB%A4%E9%9A%8F%E8%AE%B0.html</url>
    <content type="text"><![CDATA[开胃菜linux命令以多练习方能熟练，所以本文主要以常见的一些linux查询场景为例，记录常见linux命令的使用。说明：以下示例命令为在mac os上测试ok词频统计给一个文件words.txt，内容如下所示：12the day is sunny the thethe sunny is is统计单词出现的频率，并按照词频倒序排列。要求输出如下：1234the 4is 3sunny 2day 1答案1cat words.txt | tr -s &apos; &apos; &apos;\n&apos; | sort | uniq -c | sort -r | awk &apos;&#123; print $2, $1 &#125;&apos;这里大致说下以上命令的使用：trtr意为 translate，用来进行字符进行替换、压缩和删除。12345678910-d delete 删除-s squeeze 压缩eg:&gt; echo &apos;HELLO WORLD&apos; | tr &apos;A-Z&apos; &apos;a-z&apos;&gt; hello world&gt; echo &apos;hello world!&apos; | tr -s &apos; &apos; &apos; &apos;&gt; hello world!第一个为原字符集，第二个为替换成的目标字符集参考：tr命令sortsort顾名思义排序12-r reverse 反转-u unique 不同参考：sort命令uniq通常和sort一起使用123456789101112131415161718192021-c count 记录重复个数eg: 对文件words.txt the day is sunny the the sunny is is&gt; cat words.txt | uniq&gt; the day is sunny the sunny is可以看到直接用unqi还是会有重复的，所以才会和sort配合使用参考：uniq命令grepgrep（global search regular expression(RE) and print out the line，全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具。1234-E --extended-regexp #将样式为延伸的普通表示法来使用-f &lt;规则文件&gt; --file=&lt;规则文件&gt; #指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式-n --line-number #在显示符合样式的那一行之前，标示出该行的列数编号-c --count #计算符合样式的列数下面举例说明使用方法过滤一个文件中的有效电话号码，有效电话号码格式为：(xxx) xxx-xxxx or xxx-xxx-xxxx，x为数字现有一个文件file.txt为123987-123-4567123 456 7890(123) 456-7890方法一 ———- [-E]1234-E 使用扩展的正常的正则表达式过滤grep -E &apos;^\(\d&#123;3&#125;\) \d&#123;3&#125;-\d&#123;4&#125;$&apos; file.txtorcat file.txt | grep -E &apos;^(\(\d&#123;3&#125;\) |\d&#123;3&#125;-)\d&#123;3&#125;-\d&#123;4&#125;$&apos;方法二 ———- [-f]12345678写一个规则文件pattern.txt:^\d\&#123;3\&#125;-\d\&#123;3\&#125;-\d\&#123;4\&#125;$^(\d\&#123;3\&#125;) \d\&#123;3\&#125;-\d\&#123;4\&#125;$筛选命令为：grep file.txt -nf pattern.txtorgrep file.txt -cf pattern.txt参考：每天一个linux命令（39）：grep 命令awk使用方法：awk &#39;{pattern + action}&#39; filenameseg:123456789cat file.txt | awk &apos;BEGIN &#123;print &quot;Begin!&quot;&#125; &#123;print $1&#125; END &#123;print &quot;End!&quot;&#125;&apos;awk工作流程：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。常见内置变量NF 浏览记录的域的个数NR 已读的记录数示例：对一个文件file.txt，其内容为：123name agealice 21ryan 30需要把它转化为如下形式 (相当于矩阵的反转)：12name alice ryanage 21 30给出示例代码为：123456789101112131415awk &apos;&#123; for (i = 1; i &lt;= NF; i++) &#123; if(NR == 1) &#123; s[i] = $i; &#125; else &#123; s[i] = s[i] &quot; &quot; $i; &#125; &#125;&#125;END &#123; for (i = 1; s[i] != &quot;&quot;; i++) &#123; print s[i]; &#125;&#125;&apos; file.txt参考：linux awk命令详解其他小菜1、统计某一目录下文件数目1ls -l | wc -l参考链接：每天一个linux命令（40）：wc命令2、统计某一目录下普通文件个数123456ls -l | grep &apos;^-&apos; | wc -lls -l 结果如下：-rw-r--r-- 1 zhang_zack staff 174 7 7 22:11 db.jsondrwxr-xr-x 291 zhang_zack staff 9894 2 22 19:37 node_modules第一个d表示是否为文件夹]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo定制打赏功能]]></title>
    <url>%2F2017%2Fhexo%E5%AE%9A%E5%88%B6%E6%89%93%E8%B5%8F%E5%8A%9F%E8%83%BD.html</url>
    <content type="text"><![CDATA[定制hexo样式个人博客采用hexo依托github搭建，采用简洁美观的next主题。打开[打赏]功能后，对[赏]字按钮样式一直耿耿于怀。打开[打赏]，默认的样式如下：见过一个圆形[赏]样式之后，从此美观强迫症停不下来！样式如下：如何修改呢？在hexo/themes/next/layout/_macro/reward.swig文件中，我们看到[打赏]功能的主要界面代码。自定义如下标签样式1&lt;span&gt;赏&lt;/span&gt;↓↓↓1&lt;span onmouseover=&quot;this.style.color=&apos;rgb(236,96,0)&apos;;this.style.background=&apos;rgb(204,204,204)&apos;&quot; onmouseout=&quot;this.style.color=&apos;#fff&apos;;this.style.background=&apos;rgb(236,96,0)&apos;&quot; style=&quot;display: inline-block; width: 70px; height: 70px; border-radius: 100%; color: rgb(255, 255, 255); font-style: normal; font-variant: normal; font-weight: 400; font-stretch: normal; font-size: 35px; line-height: 75px; font-family: microsofty; background: rgb(236, 96, 0);&quot;&gt;赏&lt;/span&gt;引用打赏按钮· Issue #1143]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>博客技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[偶遇mysql group_concat与find_in_set函数]]></title>
    <url>%2F2017%2F%E5%81%B6%E9%81%87mysql-group-concat%E4%B8%8Efind-in-set%E5%87%BD%E6%95%B0.html</url>
    <content type="text"><![CDATA[偶遇需求逛论坛，偶然看到下面这个问题，因为最近一直在写Hive SQL，就意起试图解决(装b，逃…)123456789101112device、order2张表。每完成一个订单，会插入数据到order表里，记录一些数据，包括device_id,时间，状态（已支付）等……（没有订单就不插入数据到order表）device 表里面就是一些设备信息。需要的结果是：展示（一段时间内），每一天，有哪些设备没有订单；举栗子：今天设备 abc 没有订单 昨天bd没有订单2017-06-08 a,b,c2017-06-07 b,d思考一下，试试…探索首先，我们新建两个表，来进行之后的尝试。12345678910111213141516171819device+-----------+| device_id |+-----------+| 1 || 2 || 3 || 4 || 5 |+-----------+order+---------------------+----------+-----------+| time | order_id | device_id |+---------------------+----------+-----------+| 2017-06-08 00:00:00 | 1 | 1 || 2017-06-08 00:00:00 | 2 | 2 || 2017-06-07 00:00:00 | 3 | 1 |+---------------------+----------+-----------+要找没有订单的设备，条件是device表中不在日订单中。我们试图以time来进行group by，并尝试合成每组的device_id。通过查找mysql聚合函数，被我查到group_concat。虽然不知道对之后有没有帮助，我们先了解一下其效果，如下：1234567891011select time, GROUP_CONCAT(device_id) as device_listfrom ordergroup by time;结果如下:+---------------------+--------------------+| time | device_list |+---------------------+--------------------+| 2017-06-07 00:00:00 | 1 || 2017-06-08 00:00:00 | 1,2 |+---------------------+--------------------+其次，我们如何找出所有设备中当天没有订单的设备呢？组合group_concat之后的表与device表，我们知道from a, b如果不使用join on语句，即为两表的笛卡尔积。1234567891011121314151617181920212223select *from ( select time, GROUP_CONCAT(device_id) as device_list from order group by time)a, deviceorder by time;+---------------------+--------------------+-------------+| time | device_list | device_id |+---------------------+--------------------+-------------+| 2017-06-07 00:00:00 | 1 | 1 || 2017-06-07 00:00:00 | 1 | 2 || 2017-06-07 00:00:00 | 1 | 3 || 2017-06-07 00:00:00 | 1 | 4 || 2017-06-07 00:00:00 | 1 | 5 || 2017-06-08 00:00:00 | 1,2 | 1 || 2017-06-08 00:00:00 | 1,2 | 2 || 2017-06-08 00:00:00 | 1,2 | 3 || 2017-06-08 00:00:00 | 1,2 | 4 || 2017-06-08 00:00:00 | 1,2 | 5 |+---------------------+--------------------+-------------+之后，如果去过滤取得device_id not in group_concat_list。很可惜，group_concat返回的是string_list。不过幸运的是，mysql函数中提供了一个解决函数find_in_set。效果如下：12&gt; SELECT FIND_IN_SET(&apos;b&apos;,&apos;a,b,c,d&apos;);&gt; 2结论通过上面的探索，我们最终尝试出最终可以的解决方案如下：12345678910111213141516select time, GROUP_CONCAT(device_id) as device_listfrom ( select time, GROUP_CONCAT(device_id) as device_list from order group by time)tmp, devicewhere FIND_IN_SET(device_id, device_list) = 0group by time;结果如下：+---------------------+--------------------+| time | device_list |+---------------------+--------------------+| 2017-06-07 00:00:00 | 2,3,4,5 || 2017-06-08 00:00:00 | 3,4,5 |+---------------------+--------------------+水一篇博客，赶紧滚去写论文去惹…]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime插件开发 -- CabbageFileDiff]]></title>
    <url>%2F2017%2Fsublime%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91-CabbageFileDiff.html</url>
    <content type="text"><![CDATA[需求来了最近总是需要review旧的业务代码进行重构，这个过程中涉及不少sql字段的比较。可类比比较两个无序字符串数组的异同，跟普通的filediff需求略微不同。虽然可以写一个脚本来处理，但是这样每次都需要对比较的字段新建文件。而通常的应用场景是想直接把内容复制到sublime view缓存中进行比较，而不需要新建文件。我试图寻找此需求的sublime插件：FileDiffs、Compare Side-By-Side等，由于无法进行无序比较，效果都不是很好。之后尝试接入sublime plugin API，参考FileDiffs的展示效果，做个简易的适合自己需求的小插件Cabbage File Diff。开发之前Sublime插件开发使用python语言(我假设读者已经熟练掌握python：)，笔者使用的sublime版本为：Sublime Text3。值得一提的是Sublime Text3基于Python3（Sublime Text2基于Python2，据作者猜测）。之前一直把Sublime Text仅仅作为一个编辑器，现在才惊觉这货简直就是一个Python交互式shell啊！ctrl + 反单引号打开sublime命令行交互界面，输入print(&quot;Hello World!&quot;)一个新世界的大门打开。开发关于Sublime插件的开发，网上已经有不少很好的教程。尽管如此，为了阅读流畅性以及更通俗易懂的引导大家(请开始你的表演)…打开Sublime，在菜单栏选择Tools&gt;Developer&gt;New Plugin...，编辑文件如下：123456import sublimeimport sublime_pluginclass ExampleCommand(sublime_plugin.TextCommand): def run(self, edit): self.view.insert(edit, 0, &quot;Hello, World!&quot;)保存文件为任意文件名.py至Packages文件夹下，关于sublime插件API的继承接口sublime_plugin.TextCommand问题，之后再进行描述。关于类名问题，名称最后要以Command结尾，前面的Example名称进行 1）单词分割 2）_连接 3）首字母小写 转变后为此命令调用名称。eg: CabbageFileDiffCommand其调用命令为cabbage_file_diff。在sublime控制台中输入view.run_command(&#39;example&#39;)，即在界面中插入”Hello, World!”（view为当前编辑框，可控制台自动导入）。Sublime插件开发API手册[中文版]在编写插件时，可以随时参考API。Sublime Plugin可继承的类有如下四个：TextCommand: 通过View对象来访问选择的/缓存区的内容，最为常用WindowCommand: 通过Window对象来引用当前窗口ApplicationCommand: 既不能引用文字内容，也不能引用窗口，无视之EventListener: 文档发生改变时的事件处理ok，介绍到这里就可以对着API开发了。这里再提一句，如下代码参考SublimeFileDiffs fork，原地址：SublimeFileDiffs。直接开撕代码，注释讲解，方便大家很快的了解重点。一个view即为编辑器中一个tab！123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import sublimeimport sublime_pluginclass CabbageFileDiffCommand(sublime_plugin.TextCommand): &quot;&quot;&quot; main command &quot;&quot;&quot; def run(self, edit): views = self.view.window().views() #获取当前tab其窗口实例，并获取所有打开的 tab view if len(views) != 2: # 只比较两个打开的tab return contents = [] for v in views: #遍历所有 tab view this_content = v.substr(sublime.Region(0, v.size())) #view选中全部区域 this_content = sorted(this_content.split()) #分割，排序 contents.append(this_content) diffs = self.file_diff(contents[0], contents[1]) scratch = self.view.window().new_file() #新建一个tab scratch.set_scratch(True) scratch.set_syntax_file(&apos;Packages/Diff/Diff.tmLanguage&apos;) #tab中的语法格式，方便更明显的看到结果 scratch.run_command(&apos;my_dump&apos;, &#123;&apos;diffs&apos;: diffs&#125;) #到要插入的比较结果的 tab view下执行插入命令，并传入命令参数 def file_diff(self, first_content, second_content): &quot;&quot;&quot;[summary] 比较 first tab 和 second tab 内容的排序后的内容，按需拼接格式并返回输出 Diff.tmLanguage的语法格式： 空格开头的灰色 +开头绿色 -开头红色 约定最后结果灰色为两文件共有，+开头为+++ first文件独有，-开头为--- second文件独有 @@ 3,+1,-1 @@，其中无符号为共有单词个数，正数为first文件独有单词个数，负数为second文件独有单词个数 &quot;&quot;&quot; ... return resultclass MyDumpCommand(sublime_plugin.TextCommand): def run(self, edit, diffs): self.view.insert(edit, 0, diffs)最后添加右键菜单，在同一路径下新建Context.sublime-menu文件，文件内容其中{ &quot;caption&quot;: &quot;-&quot; }为菜单分割12345[ &#123; &quot;caption&quot;: &quot;-&quot; &#125;, &#123; &quot;caption&quot;: &quot;Cabbage File Diff&quot;, &quot;command&quot;: &quot;cabbage_file_diff&quot; &#125;, &#123; &quot;caption&quot;: &quot;-&quot; &#125;]到此，娱乐项目结束。ヾ(｡｀Д´｡)是的，就是这么水（逃。。。示例演示给两个文件123Hello Worldzhangjiahua与1234zhangjiahuahaizeiwang点击右键如下图：然后结果即如下图：参考链接编写你的第一个sublime插件]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Majority Number --- 出现次数超过数组长度1/n的数字]]></title>
    <url>%2F2017%2FMajority-Number-%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E6%95%B0%E7%BB%84%E9%95%BF%E5%BA%A61-n%E7%9A%84%E6%95%B0%E5%AD%97.html</url>
    <content type="text"><![CDATA[题目为了循序渐进的说明问题，我们先给出如下问题：找出数组中出现次数超过其长度1/2的数字？要求时间复杂度O(n), 空间复杂度O(1)分析这道题在剑指offer、leetcode、lintcode等很多地方都能看到。最容易想到的解法：统计各不同元素出现个数，大于1/2即为解，但是如此空间复杂度就达不到要求。排序统计：先排个序，再统计，似乎能达到O(1)的空间复杂度。不过比较排序算法的最快时间复杂度为O(nlogn), 为了达到要求只能使用O(n)的排序算法，基数排序似乎能满足需求。本篇博文基数排序不是我们的重点（桶排序、计数排序、基数排序的区别大家能弄明白么？广告：之后可能会写关于排序的专题，有兴趣请持续关注白菜君的博客…），我们要说的是抵消算法。超过一半的数字，如果与剩余和它不同的数相抵消，最后剩下的数就是出现次数超过一半的数字。Java代码如下:1234567891011121314151617181920public static int more_1_2(int[] nums) throws Exception &#123; int x = 0; int cnt = 0; for (int i = 0; i &lt; nums.length; i++) &#123; if (cnt == 0) &#123; x = nums[i]; cnt++; &#125; else &#123; if (x != nums[i]) cnt--; else cnt++; &#125; &#125; //判断是否有这样的数 cnt = 0; for (int i = 0; i &lt; nums.length; i++) &#123; if (nums[i] == x) cnt++; &#125; if (cnt &gt; nums.length / 2) return x; else throw new Exception(&quot;数组不存在超过1/2的元素&quot;);&#125;扩展扩展问题找出数组中出现次数超过其长度1/3的数字？要求时间复杂度O(n), 空间复杂度O(1)头脑风暴头脑风暴百度百科关键词会跟上一种创造能力的集体训练法，在我这里日常却是头脑风暴(精神错乱状态)。有兴趣的了解博主脑回路的可以继续往下看，如果时间紧(哥们儿分分钟几百万上下，赶紧的)，那就请移步下个小节。我曾试图把数组分成3个部分12345+-----------+-----------+-----------+| &lt;1&gt; | &lt;2&gt; | &lt;3&gt; |+-----------+-----------+-----------+| 0 - 1/3 | 1/3 - 2/3 | 2/3 - 1 |+-----------+-----------+-----------+对&lt;1,2&gt;、&lt;1,3&gt;、&lt;2,3&gt;、这三个部分分别采用1/2的方式，想着在2/3中超过1/3不就是超过1/2么？再经过一番头脑风波，发现忽略了一种情况：假如超过1/3的元素分别分布在&lt;1&gt;、&lt;2&gt;、&lt;3&gt;中，而这三部分其中任意两部分加起来都不超过1/2!!如果在我这个思路下，你有什么想法，欢迎在博文下方评论告知。洗脑风暴下面开始洗脑，把人民群众拉回共产主义正确道路上来。主要思路：1234我们知道超过1/3次数的数字个数不超过2个。类似抵消的思想，假如有3个数不相同，那么我们就让它们抵消掉。两个int存储两个数，两个int分别存储两个数出现的次数cnt。遍历数组遇到相同的cnt++, 遇到与两个数都不同的，那么两个数对应的cnt--。代码如下：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/** * 我是个很懒的人，能写一行的代码绝不写两行. 所以使用数组来存储，也导致代码中break的问题 * 注意我为什么使用break * * @param nums * @return */public static List&lt;Integer&gt; more_1_3(int[] nums) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); if (nums.length &lt; 3) &#123; for (int i = 0; i &lt; nums.length; i++) &#123; if (i == 1 &amp;&amp; nums[1] == nums[0]) continue; res.add(nums[i]); &#125; return res; &#125; int[] tmp = new int[2]; int[] cnt = new int[2]; for (int i = 0; i &lt; nums.length; i++) &#123; if (nums[i] == tmp[0]) cnt[0]++; else if (nums[i] == tmp[1]) cnt[1]++; else if (cnt[0] == 0) &#123; tmp[0] = nums[i]; cnt[0]++; &#125; else if (cnt[1] == 0) &#123; tmp[1] = nums[i]; cnt[1]++; &#125; else &#123; cnt[0]--; cnt[1]--; &#125; &#125; //验证两数是否为超过1/3元素 cnt = new int[2]; for (int i = 0; i &lt; nums.length; i++) &#123; for (int j = 0; j &lt; tmp.length; j++) &#123; if (nums[i] == tmp[j]) &#123; cnt[j]++; break; //这里加break, 防止连续两次+1的情况。eg: &#123;0, 0, 0&#125; &#125; &#125; &#125; for (int i = 0; i &lt; tmp.length; i++) &#123; if (cnt[i] &gt; nums.length / 3) &#123; res.add(tmp[i]); &#125; &#125; return res;&#125;后记之后1/n的情况自然而然就能扩展出去了，大家可以在如下地址进行练习：leetcode: Majority Element II | LeetCode OJlintcode: Majority Number II打完收工！读者：这是什么武功？博主：想学啊你，我教你啊。。。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Guava源码分析(1) --- ComparisonChain]]></title>
    <url>%2F2017%2FGuava%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-1-ComparisonChain.html</url>
    <content type="text"><![CDATA[前言果然我还是话多，总想在前言整个大新闻orz. 本篇文章主要讲解Guava如何简化Object的toString和compareTo方法的实现，着重分析ComparisonChain如何实现懒比较。具体涉及到源码中MoreObjects和ComparisonChain的实现，附带Fluent Interface等…Guava是Google提供的Java核心工具库，截止当前时刻最新版本为Guava 21.0，本文的源码分析也是基于此版本进行的MoreObjects自Java7之后，Guava推荐使用sun官方实现的Objects，Guava本身的Objects基本没有任何作用。以前版本的toString工具方法也已转移到新类MoreObjects之中。我们知道Java原生toString方法对于对象会返回类全名 + @ + 对象地址；假如为数组对象，则返回[ + 类型 + @ + 对象地址，这样非常不友好。我们可以通过MoreObjects类来覆写toString方法，进行友好输出。如下栗子1234System.out.println(new int[]&#123;1, 2, 3&#125;); //打印 [I@3cd1a2f1String out = MoreObjects.toStringHelper("MyTestClass").addValue(true).add("second", 12).toString();System.out.println(out); //打印 MyTestClass&#123;true, second=12&#125;关于MoreObjects.toStringHelper的实现。toStringHelper为MoreObjects的静态内部类，通过MoreObjects.toStringHelper(&quot;&quot;)来构造对象。12345678910111213141516171819//MoreObjects源码，这里只复制关键部分public final class MoreObjects &#123; ... public static ToStringHelper toStringHelper(String className) &#123; return new ToStringHelper(className); &#125; ... public static final class ToStringHelper &#123; private final String className; private final ValueHolder holderHead = new ValueHolder(); private ValueHolder holderTail = holderHead; private ToStringHelper(String className) &#123; this.className = checkNotNull(className); &#125; &#125; ... private MoreObjects() &#123;&#125;&#125;可以看到toStringHelper的构造方法访问权限修饰词为private，为什么MoreObjects外部类在方法toStringHelper中可以访问？private修饰的意思是：除包含该成员的类之外，其他任何类都无法访问这个成员。外部类包含内部类，可以理解为包含内部类所有，故也能被访问！toStringHelper类中以ValueHolder形式带头结点的链表来存储传入的键值对。1234567891011121314151617181920212223public static final class ToStringHelper &#123; private final ValueHolder holderHead = new ValueHolder(); private ValueHolder holderTail = holderHead; ... private ValueHolder addHolder() &#123; ValueHolder valueHolder = new ValueHolder(); holderTail = holderTail.next = valueHolder; return valueHolder; &#125; ... private ToStringHelper addHolder(String name, @Nullable Object value) &#123; ValueHolder valueHolder = addHolder(); valueHolder.value = value; valueHolder.name = checkNotNull(name); return this; &#125; ... private static final class ValueHolder &#123; String name; Object value; ValueHolder next; &#125;&#125;对于链表的插入，程序非常优雅的分成添加结点和赋值两部分，见上源码无参addHolder和有参addHolder。使用连续赋值进行尾指针调整，holderTail = holderTail.next = valueHolder，这样感觉简便的多，可以参考！ComparisonChainJava中实现类的一个比较器Comparator，有时也略麻烦。对于一个有三个成员的类People，它的比较器的实现如下：123456789101112131415161718192021222324252627class Person &#123; private String lastName; private String firstName; private int zipCode;&#125; //compareTo方法，很不直观 public int compareTo(Person other) &#123; int cmp = lastName.compareTo(other.lastName); if (cmp != 0) &#123; return cmp; &#125; cmp = firstName.compareTo(other.firstName); if (cmp != 0) &#123; return cmp; &#125; return Integer.compare(zipCode, other.zipCode); &#125; //基于ComparisonChain的实现，则非常直观。 public int compareTo(Foo that) &#123; return ComparisonChain.start() .compare(this.aString, that.aString) .compare(this.anInt, that.anInt) .compare(this.anEnum, that.anEnum, Ordering.natural().nullsLast()) .result(); &#125;从上面的代码我们可以发现：基于ComparisonChain实现的比较器非常直观。这里先介绍一下，上面这个可以连续引用方法的接口方式为Fluent Interface。通过在方法中返回对象本身(return this)，可以很容易实现。ComparisonChain最关键的是能实现懒比较：执行比较操作直至发现非零的结果，在那之后的比较输入将被忽略。拿上面的栗子来说，也就是当aString能比较出两个对象的大小后，之后的anInt和anEnum就不再比较，更快速！那么如何实现懒比较coding呢？ComparisonChain类源码如下：1234567891011121314151617181920212223242526272829public abstract class ComparisonChain &#123; private ComparisonChain() &#123;&#125; public static ComparisonChain start() &#123; return ACTIVE; &#125; private static final ComparisonChain ACTIVE = new ComparisonChain() &#123; ... @Override public ComparisonChain compare(int left, int right) &#123; return classify(Ints.compare(left, right)); &#125; ... ComparisonChain classify(int result) &#123; return (result &lt; 0) ? LESS : (result &gt; 0) ? GREATER : ACTIVE; &#125; @Override public int result() &#123; return 0; &#125; &#125;; private static final ComparisonChain LESS = new InactiveComparisonChain(-1); private static final ComparisonChain GREATER = new InactiveComparisonChain(1);&#125;抽象类ComparisonChain的start方法返回一个实现了抽象类的实例对象ACTIVE，此实例对象每个抽象方法实现都覆盖一层classify操作，来判断返回ACTIVE、GREATER、LESS哪个ComparisonChain实例对象。ACTIVE对象表示两对象比较结果为0的ComparisonChain实例，GREATER对象表示两对象比较结果为1的ComparisonChain实例，LESS对象表示两对象比较结果为-1的ComparisonChain实例。我们再来看一下表示GREATER、LESS的实现类InactiveComparisonChain12345678910111213141516171819202122private static final class InactiveComparisonChain extends ComparisonChain &#123; final int result; InactiveComparisonChain(int result) &#123; this.result = result; &#125; ... @Override public ComparisonChain compare(int left, int right) &#123; return this; &#125; @Override public ComparisonChain compare(long left, long right) &#123; return this; &#125; ... @Override public int result() &#123; return result; &#125;&#125;所有抽象方法实现均只返回自身(return this)，不进行任何操作。ok如此便进行了编码上的懒实现，各位看官群众们知道其中缘由了么？那么我来分析一下：每次比较通过classify方法处理，结果都会是ACTIVE、GREATER、LESS一种，它们都是ComparisonChain抽象类的实现实例对象，故而可以构成Fluent Interface。而如果比较返回的是GREATER或LESS，由于其compare实现为return this，不进行任何处理，故而忽略ComparisonChain.start().compare(this.aString, that.aString).compare(this.anInt, that.anInt).result()有结果之后的比较输入.compare(this.anInt, that.anInt)...参考链接关于接口设计，还有Fluent Interface，这种有趣的接口设计风格[Google Guava] 1.3-常见Object方法]]></content>
      <categories>
        <category>源码</category>
      </categories>
      <tags>
        <tag>Guava</tag>
        <tag>源码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书评(三)：大型网站技术架构 -- 核心原理与案例分析]]></title>
    <url>%2F2017%2F%E4%B9%A6%E8%AF%84-%E4%B8%89-%EF%BC%9A%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84-%E6%A0%B8%E5%BF%83%E5%8E%9F%E7%90%86%E4%B8%8E%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90.html</url>
    <content type="text"><![CDATA[前言书评系列这是第三篇，稍微看过前两篇的胖友们肯定知道了：说是书评，其实只能算是我的读书笔记。评论这个词偏向于向别人阐述自己的主观印象，想到此系列一方面作为自己的读书笔记，另一方面想供阅读对应书目的人作为参考，所以也很无耻的用了书评二字（相信大家也习惯了我，每篇第一段的瞎扯，哈，哈，哈…我想大部分程序猿的编程之路都或多或少的从网站起步，固然搭建一个网站说难不难。github上随便down一个网上购物的代码调试搭建，后台数据处理臆想中也无非增删改查，so easy。然而学习网站编程也是这么简单么，实则不然！任何一门技术都像武侠中的练武一样，一招半式或许不难，难的是学精并融会贯通。学习过程中很多时候我们都感觉像摸瞎般的龃龉前行，假如有老师或者像看书目录一样的提纲挈领的指明方向，那么肯定会事半功倍。而今天推荐的这本书正是网站学习中的九阳真经目录！点击这里查看[书评系列]上篇文章《大型网站技术架构 – 核心原理与案例分析》，推荐力度：★★★★☆不得不说这本书是大型网站技术架构方面的神作！读后感概括：本书详细叙述了大型网站架构的演化，并从高性能、高可用、伸缩性、可扩展和安全五个方面进行深入剖析，并使用栗子进行说明。关于网站架构的阐述高屋建瓴，不仅对架构师帮助巨大，还非常有助于提升技术猿的全局观。本书分四个部分：网站架构演化概述、五大特征架构详解、网站架构案例、架构师艺术。最后一部分我就没有看，而本篇书评也请容许我无耻的照搬书中关于网站架构演化部分，主要是因为感觉比较经典。大型网站架构演化1）初始阶段LAMP(Linux+Apache+MySQL+PHP)，一台服务器2）应用、数据、文件分离，针对业务选用不同硬件配置服务器3）二八原则：80%业务集中在20%的数据上，增加缓存4）采用应用服务器集群(每台服务器同样应用)，使用负载均衡服务器改善负载5）数据库读写分离，构建单独的数据访问模块6）针对数据传输改进，主要利用缓存，增加CDN(内容分发网络)和反向代理7）分布式文件和分布式数据库8）针对本站内容的检索服务，增加NoSQL和搜索引擎服务器9）随着业务继续发展，拆分网站成不同应用，独立部署维护10）分拆的不同应用主要是通过同一数据存储系统来进行关联，所以分拆应用越多，数据库压力越大。为了解决类似的问题，提取共用业务成分布式服务。比如访问数据库、存取文件这类服务，各个应用统一交给某一服务代理。这里作者最后指出网站架构的价值不在于搭建大型网站的技术，而在于能随着网站的需求灵活应对。五大特征架构详解同样为了清晰方便，这里使用思维导图来展示。发散思维反向代理和负载均衡的关系？Web容器是什么，为什么需要？防火墙的作用，为什么有了杀毒软件还需要防火墙？受限于博主个人知识面，以上仅个人看法，欢迎批评指正。]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书评(二)：SQL必知会(第4版)]]></title>
    <url>%2F2017%2F%E4%B9%A6%E8%AF%84-%E4%BA%8C-%EF%BC%9ASQL%E5%BF%85%E7%9F%A5%E4%BC%9A-%E7%AC%AC4%E7%89%88.html</url>
    <content type="text"><![CDATA[前言过年在家，瓜子花生、鸭肉羊肉、吃吃睡睡、电视电影…忙碌浪荡十多天，期间看了这本SQL必知会。老实讲看技术书是需要效率+动手，然而在家我也没法要求我自己额，真是个没有自制力的熊孩子。拉回正题，继续瞎侃（坐稳嘞老司机要开车了）。因为我一般常是结合搜索引擎需求驱动学习，加上精力分散没有系统深入学习，以致SQL水平一直停留在简单的增删改查。甚至更差，比如常混淆group by和having的使用、group by、having与order by的语句顺序等。果然缺乏系统的学习理解，导致要么死记硬背久了就忘，要么理解偏差认识不全。在知乎逛看人都推荐SQL必知会入门，这次就来补下使用基础。点击这里查看[书评系列]上篇文章《SQL必知会》，推荐力度：★★★☆☆读后感概括：本书是针对SQL使用方面的简单介绍，较为系统全面却不啰嗦乏味；概念清晰而不拘泥某一个DBMS软件，为深入学习做了很好的铺垫。本书共22个课时，150页左右。关于书的内容，我简单使用思维导图进行总结，如下所示关于书中细节，我简单扼要的圈出我认为的重点，概括为基本语法：1）不区分大小写。建议关键字大写，表名列名小写2）每条SQL语句最好以;结束3）注释语法，单条-- balabala或# balabala，多条/*balabala*/4）Distinct语法，作用于其后所有列5）DESC与ASC(Default)只作用于其前一列6）Between关键字包含开始和结束值7）如果没有括号()，先处理AND，再处理OR8）通配符关键字LIKE，通配符%(匹配任何字符，除NULL)、-(单个字符)9）除聚集计算语句外，select中每一列都必须在group by中10）group by用来分组，having用来过滤分组11）select子句顺序：select -&gt; from -&gt; where -&gt; group by -&gt; having -&gt; order by12）所有DBMS操作，都有底层SQL语言的支持。同样，应用层高级编程语言的sql操作都是需要SQL原语的支持。就像python中的游标，本身就有SQL支持，语言库封装使用的。这个突然想到python中MySQLdb库的MySQL操作，都是在游标cursor基础上进行的，执行完后在数据库连接conn上进行commit操作。python代码如下：12345conn = MySQLdb.connect()cur = conn.cursor()sql = "..."res = cur.execute(sql)conn.commit()受限于博主个人知识面，以上仅个人看法，欢迎批评指正。]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[16年年终总结 --- 写于农历新年岁末]]></title>
    <url>%2F2017%2F%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93-%E5%86%99%E4%BA%8E%E5%86%9C%E5%8E%86%E6%96%B0%E5%B9%B4%E5%B2%81%E6%9C%AB.html</url>
    <content type="text"><![CDATA[给打赏，也打不开的小黄文 ]]></content>
      <categories>
        <category>随感</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[书评(一)：Java多线程编程核心技术]]></title>
    <url>%2F2017%2F%E4%B9%A6%E8%AF%84-%E4%B8%80-%EF%BC%9AJava%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF.html</url>
    <content type="text"><![CDATA[前言古人言：读万卷书，行万里路。读书的重要性自不必说，然而怎奈何有限的时间与无尽的兴趣爱好的矛盾，让我深刻感受到把时间投入到读好书的重要性。所以为了帮助广大书友，尤其是跟我一样同为程序猿的勤奋好学的小伙伴们，这里开书评系列博文（努力写下去，认真脸…），主要用来总结已看过的书，并推荐好书。这里采用星级评价：5星为力荐（握草，神书，快来看啊），1星为呵（看完后我的内心基本毫无波澜），0星为呵呵哒（哔了狗，看书的时间还不如看毛片，有个电视剧叫毛骗，很好看，认真脸）。关于行文方式，本站博文力求把想展示的结果放在最显眼的部位，让大家能一眼辨别是不是你的菜，力求简洁并尝试幽默（古板脸.jpg）。本系列第一篇是《Java多线程编程核心技术》，推荐力度：★☆☆☆☆有一定基础，想深入Java多线程编程的胖友们可以忽略本书。读后感首先用一句话来总结这本书：本书偏向于Java多线程API方面的使用教程，仅用代码栗子来说明如何使用，而没有更深入的剖析讲解。本书共分为7章，针对Java多线程从7个方面来描述。第1章从Java中线程的基本使用说起：新建线程、停止线程、暂停线程、线程优先级等。线程的停止和暂停方法还是有一定的可读性。第2章主要讲对象变量的多线程并发同步：主要是synchronized和volatile的使用。本章可读性不强，各种code举例，然而却没有深入剖析，知其然而不知其所以然。第3章讲线程通信：wait和notify机制，join、ThreadLocal、InheritalbeThreadLocal的使用。本章生产者消费者模式部分略微有一定的可读性，其余仅仅API使用说明。第4章和第5章分别是另一种加锁方式Lock和定时器Timer的使用说明。第6章着重讲解多线程下单例模式的实现，但是同样仅仅举栗子说明，说明不够透彻（不如看博文，后面将写一篇关于单例模式的深入一点的剖析讲解博文，敬请期待，哈哈哈…）最后第7章增补了关于线程状态、线程组、线程和线程组异常处理方面的使用说明。初学者看看使用还可以，然而想深入专研Java多线程编程的同学还是出门右转。受限于博主个人知识面，以上仅个人看法，欢迎批评指正。]]></content>
      <categories>
        <category>书籍</category>
      </categories>
      <tags>
        <tag>随感</tag>
        <tag>书评</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[17年网易有道内推笔试---构造队列]]></title>
    <url>%2F2017%2F17%E5%B9%B4%E7%BD%91%E6%98%93%E6%9C%89%E9%81%93%E5%86%85%E6%8E%A8%E7%AC%94%E8%AF%95-%E6%9E%84%E9%80%A0%E9%98%9F%E5%88%97.html</url>
    <content type="text"><![CDATA[无意中看到这道笔试题，想想自己已经估摸快一个多月没有刷算法题；简直羞愧难当，越来越水了，就试试当热热手…题目小明同学把1到n这n个数字按照一定的顺序放入了一个队列Q中。现在他对队列Q执行了如下程序：123456789while(!Q.empty()) //队列不空，执行循环&#123; int x=Q.front(); //取出当前队头的值x Q.pop(); //弹出当前队头 Q.push(x); //把x放入队尾 x = Q.front(); //取出这时候队头的值 printf(&quot;%d\n&quot;,x); //输出x Q.pop(); //弹出这时候的队头&#125;做取出队头的值操作的时候，并不弹出当前队头。小明同学发现，这段程序恰好按顺序输出了1,2,3,…,n。现在小明想让你构造出原始的队列，你能做到吗？输入描述:第一行一个整数T（T ≤ 100）表示数据组数，每组数据输入一个数n（1 ≤ n ≤ 100000），输入的所有n之和不超过200000。输出描述:对于每组数据，输出一行，表示原始的队列。数字之间用一个空格隔开，不要在行末输出多余的空格.输入例子:12345412310输出例子:123412 12 1 38 1 6 2 10 3 7 4 9 5分析首先只考虑f(n)输出1, 2, 3...n，我第一念头是按照程序逻辑逆推，按照n, n-1 ... 3, 2, 1的顺序把全部元素回插入队列。先只分析1, 2, 3的情况：首先回插3，队列集合为[3]；之后回插2，根据输出逻辑，当回插时每次需要把最后一个元素移至队列头，此时队列集合为[3, 2]；最后回插1，同理得队列集合为[2, 1, 3]。ok逆推成功，这道题不是还是挺容易的。Java程序如下所示：123456789public void generateQueue1(int n) &#123; List&lt;Integer&gt; list = new LinkedList&lt;&gt;(); for (int i = n; i &gt; 0; i--) &#123; list.add(0, i); list.add(0, list.get(list.size() - 1)); list.remove(list.size() - 1); &#125; System.out.println(list.toString());&#125;当然如果这道题分析仅仅是这样的话，那这篇博文也没有啥写的必要了。各位看官，你看到这里时，有啥别的想法思路不？后面紧接着将记录几个新颖的解题思路，虽然最后证明上面简单的逆推算法效率上基本是最高的，但是新奇的思路总是显得比较好玩。头脑风暴开胃菜这盘开胃菜的主要思路如下：以1, 2 ... n-1, n为原始队列元素，按照题目队列输出逻辑操作得到输出结果，之后以输出结果的值为下标把对应数组处填入值对应的下标。上面这句话可能比较拗口难以理解，我们举个栗子来说明一下：假如n=3，此时队列为[1, 2, 3]，通过输出逻辑输出结果数组2, 1, 3，其对应的下标为1, 2, 3。那么我们填入结果数组res方式为：res[2] = 1, res[1] = 2, res[3] = 3。（注意：上述栗子中为了方便说明，下标没有从0开始）Java程序如下：1234567891011121314151617181920212223public void generateQueue2(int n) &#123; List&lt;Integer&gt; original = new LinkedList&lt;&gt;(); for (int i = 1; i &lt;= n; i++) &#123; original.add(i); &#125; int[] tmp = new int[n]; int i = 0; while (original.size() != 0) &#123; original.add(original.get(0)); original.remove(0); tmp[i++] = original.get(0); original.remove(0); &#125; int[] res = new int[n]; for (int j = 0; j &lt; n; j++) &#123; res[tmp[j] - 1] = j + 1; &#125; for (int j = 0; j &lt; n; j++) &#123; System.out.print(res[j] + " "); &#125; System.out.println();&#125;通过上面的程序我们可以看到，虽然时间复杂度也为O(n)，但是其系数比逆推方法大。(能听我啰嗦看到这里了，简直是真爱！最重要的来了，那就继续往下看吧…)主菜下面主菜来了，我看到讨论区有不少人说可以用约瑟夫环。不懂约瑟夫环的胖友们得纠结了，啥叫约瑟夫环呀，听着好高端的样子。后面我会单独开一篇约瑟夫环问题的剖析，其精髓就是：约瑟夫环的前后状态间可以相互迭代推导，下标之间可以很容易实现转换。建议大家在了解约瑟夫环的前提下，进一步思考这道题如何使用约瑟夫环来进行分析，后面我将假设大家对约瑟夫环有一定的了解。(ヾ(｡｀Д´｡)刚说让我继续往下看，现在又来这一手，玩我呢[掀桌子…)别打我，其实也并不需要太深入了解，后面都会用直白的栗子说明，看得懂的啦。这里是希望大家看完这道题，去了解约瑟夫环之后，能再回过来想一下下面我的解题方式，或许可以帮助大家更深入理解约瑟夫环问题。约瑟夫环解题思路：通过迭代来帮助我们把[0,1]范围内的问题解，映射到[0,2]，之后继续向上映射最终得到[0,n-1]范围内的解。根据题意(我擦，这句话好像做数学应用题的套路)：对于队列0, 1, 2, 3 ... n-2, n-1，获取第一个元素后队列为2, 3, 4, 5 ... n-2, n-1, 0，我们可以把这个队列通过(x - 2 + n) % n转化为0, 1, 2, 3 ... n-3, n-2。反过来，也可以把0, 1, 2, 3 ... n-3, n-2通过(x + 2) % n向上映射成0, 1, 2, 3 ... n-2, n-1。故[0,n-2]内遍历的第一个元素，通过(x + 2) % i可以转化为[0, n-1]内遍历的第二个元素。通过上面的思路分析，我们可以知道，约瑟夫环问题可以把下层(规模小的问题)中也是上层(规模大的问题)的解层层映射，最终迭代转换成想要求得问题规模的解。这里要注意：要求的问题规模下的解需要也在下层(规模小的问题)中才能进行转化。那么有了上面的分析，这道题该继续怎么进行解答呢？考虑到我们可以很容易的求得任何问题规模下的第一个遍历元素下标，有如下思路：[0, n-2]第1次遍历 –&gt; 是[0, n-1]中第2次遍历的下标, 迭代1次[0, n-3]第1次遍历 –&gt; 是[0, n-1]中第3次遍历的下标, 迭代2次...[0, 1]第1次遍历 –&gt; 是[0, n-1]中第n-1次遍历的下标, 迭代n-2次[0, 0]第1次遍历 –&gt; 是[0, n-1]中第n遍历的下标, 迭代n-1次Java程序如下：1234567891011121314151617181920212223242526public static void generateQueue3(int n) &#123; int[] res = new int[n]; //结果数组 int x = 1; //表示第几个遍历的元素 if (n &gt; 1) res[1] = x++; //第1个下标是1 int index; for (int i = 0; i &lt; n - 2; i++) &#123; //后续第2~n-1个元素下标 index = 1; for (int j = n - i; j &lt;= n; j++) &#123; index = (index + 2) % j; &#125; res[index] = x++; &#125; index = 0; //最后第n个元素下标 for (int i = 2; i &lt;= n; i++) &#123; index = (index + 2) % i; &#125; res[index] = x; for (int i = 0; i &lt; n; i++) &#123; System.out.print(res[i] + " "); &#125; System.out.println();&#125;很明显我们可以知道我上述约瑟夫环的方式，时间复杂度为O(n^2)以上方法要么是原创，要么是根据别人思路自己想的，受限于自身知识可能解决问题的方法不是很好，如果大家有更好的这个思路下的解法欢迎留言。]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>约瑟夫环</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[视频剪辑]]></title>
    <url>%2F2017%2F%E8%A7%86%E9%A2%91%E5%89%AA%E8%BE%91.html</url>
    <content type="text"><![CDATA[前言16年7月份开始在github上搭建个人博客，之后博客却是没怎么装扮。我是个什么东西都先看美感的人，对于一个没有美感的博客自然提不起劲登录更新了。最近终于得空（好吧，是我终于想起来这一茬…），装扮了一下博客，测试一下markdown发布链接、图片、视频等的功能用法。正题那我就不扯淡，赶紧进入正题。这篇文章主要是关于14年2月份，过年在家看完只有4集的韩国棒子片《二十岁》，由于当时正在学习AE又正好听到几首比较带感的音乐，就突发奇想尝试一下视频剪辑。全凭感觉，主要是对音乐有感。先放一张我的视频大作的封面，封面周围进行模糊化，二十岁这四个字(啊，不对是两个字，是几个字来着…)，是我进行拆分后，用AE做了个随机化运动然后在进行合并(网上有教程，当时就这样边学边开始卖了，在贴吧骗小姑凉，捂脸..)下面是视频：我是想直接把视频嵌入到文章页面中来着，但是这个视频我但是发布到土豆上了，查了一下没发现好的解决办法，暂时就直接放链接吧断点BGM：断点 - 张敬轩素材：韩剧二十岁主演：李起光，李多仁片尾曲：Rain - 秦基博软件：AE制作人：鬼少/张一剪(就是我啰)]]></content>
      <categories>
        <category>视频</category>
      </categories>
      <tags>
        <tag>视频剪辑</tag>
      </tags>
  </entry>
</search>
